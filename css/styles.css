/* Using Object orienter principle, Separating skin from structure(so separating colors/visuals from size padding margin etc etc), 
separating container from content.
following BEM naming convention */
/* wherever we are using pixel size, we are doing so because  these sizes are fixed
and doesnt change whether its on mobile or desktop etc */



:root{
    --color-primary:#2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400; 
    --color-headings: #1b0760;
    --color-body: #aaa7b8;
}

*,
*::after,
*::before {
    box-sizing: border-box;
}


/* Typography */
/* setting fonts sizing for body, also setting it for different headings */

html{
    font-size: 62.5%;
}

body{
    font-family: 'Inter', sans-serif;
    color: var(--color-body);
    font-size: 2.4rem;
    line-height: 1.5;

}

h1, 
h2, 
h3{
    color: var(--color-headings);
    margin-bottom: 1rem;
}


h1{
    font-size: 7rem;
}

h2 {
    font-size: 4rem;
}

h3 {
    font-size: 3rem;
}

p{
    margin-top: 0;
}


@media screen and (min-width:1024px){
    body{
        font-size: 1.8rem;
    }
    h1{
        font-size: 8rem;
    }
    h2{
        font-size: 4rem;
    }
    h3{
        font-size: 2.4rem;;
    }
}





/* Links */
/* removing default underline, adding arrow at the end and arrow hover effect */

a{
    text-decoration: none;
}

.link-arrow{
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight:bold ;
}

.link-arrow::after{
    content: '->';
    margin-left: 5px;
    transition: margin .15s;
}

.link-arrow:hover::after{
    margin-left: 10px;
}


@media screen and (min-width: 1024px){
    .link-arrow{
        font-size:1.5rem ;
    }
}




/* Badges */ 
 /* we are creating a badge class for the structure and few other
  classes to give  colors and another class for small badges size */

.badge{
    border-radius: 20px;
    font-size: 2rem;
    font-weight: bold;
    padding: .5rem 2rem;
    white-space: nowrap;

}

.badge--primary{
    background-color : var(--color-primary);
    color : #fff;
}

.badge--secondary{
    background-color : var(--color-secondary);
    color: #fff;
}


.badge--small{
    font-size:1.6rem ;
}


@media screen and (min-width:1024px) {
    .badge{
        font-size: 1.5rem;
    }
    .badge--small{
        font-size: 1.2rem;
    }    
}



/* Lists */
/* we set basic structure for any list. Then we define style for inline list,
and we define style for verticle lists(list with ticks) */

.list{
    list-style: none;
    color: var(--color-headings);
    padding-left: 0;
}



/* each item in  an inline list has to be inline-block */
.list--inline .list__item{
    display: inline-block;
    margin-right: 2rem;
}


.list--tick {
    list-style-image: url(../images/tick.svg);
    padding-left: 3rem;
}


.list--tick  .list__item{
    padding-left: 0.5rem;
    margin-bottom: 1rem;
    list-style-image: url(../images/tick.svg);
}

@media screen and (min-width:1024px) {
    .list--tick .list__item{
    padding-left:0;
    }
}




/* icons */

/* we set sizing of our icon and color. icon has a white circle outside,so we use a span/div a .icon-container
and make it circle, and set it to flex and put items at center,only item it has is our icon so it goes to center
we actually set the container to inline-flex so we can put other stuff on the same line we use the icon */

.icon{
    width: 40px;
    height: 40px;
}


.icon--primary{
    fill: var(--color-primary);
}

.icon-container{
    height: 60px;
    width: 60px;
    background-color: #f3f9fa;
    display: inline-flex;
    border-radius: 50%;
    justify-content: center;
    align-items: center;
}




/* Buttons */
/* 
We define primary shape size of our button, some padding and text format, for block button set full width of its ::content
and we set some colors, hover effect and outline */

.btn {
    border-radius: 40px;
    border: 0;
    cursor: pointer;
    font-size: 1.8rem;
    font-weight: 600;
    margin: 1rem 0;
    padding: 2rem 3rem;
    text-align: center;
    text-transform: uppercase;
    white-space: nowrap;
}

.btn--primary {
    background: var(--color-primary);
    color: #fff;
}

.btn--primary:hover {
    background: #3a8ffd;
}

.btn--secondary {
    background: var(--color-secondary);
    color: #fff;
}

.btn--secondary:hover {
    background: #05cdf0;
}

.btn--accent {
    background: var(--color-accent);
    color: #fff;
}

.btn--accent:hover {
    background: #ec3000;
}

.btn--outline {
    background: #fff;
    color: var(--color-headings);
    border: 2px solid var(--color-headings);
}

.btn--outline:hover {
    background: var(--color-headings);
    color: #fff;
}

.btn--block {
    width: 100%;
    display: inline-block;
}

@media screen and (min-width: 1024px) {
    .btn {
        font-size: 1.5rem;
    }
}





/* inputs for search and input field */
/* we create the input box, and then we create a div with input box and a button and define styles to combine both,
set the input-grp div to flex so both are shown side by side,
we remove border from our input field  and give the div border  */

.input{
    border : 1px solid #ccc;
    border-radius : 30px;
    color : headings;
    font-size: 2rem;
    outline : 0;
    padding : 1.5rem 3.5rem;

}

::placeholder{
    color: cdcbd7;
}

@media screen and (min-width:1024px){
     .input{
        font-size: 1.5rem;
     }
}


.input-group{
    border: 1px solid #ccc;
    border-radius: 30px;
    display: flex;
}

.input-group .input{
    border : 0px;
    flex-grow: 1;
}

.input-group .btn{
    margin: 4px;
}


/* Cards */
/* we create a card class, and its header and body, also define colors */
/* later we use card, badge and lists to create a plan section */

.card{
    border-radius: 7px;
    box-shadow: 0 0 20px 10px;
    overflow: hidden;
    
}

.card__header, .card__body{
    padding: 2rem 3rem;
    
}


.card--primary .card__header{
    background:var(--color-primary);
    color: #fff;
}

.card--secondary .card__header {
    background: var(--color-secondary);
    color: #fff;
}


/* Plans : Plans contains a card, a badge, a list and a button */
/* The card header contains a header for plan name,
pricing,a badge and a small description Card body contains a tick-list and a button We also have a popular badge for popular card,
we just insert an image on the popular card before and using absolute positioning place it on top right of the card,also  
for popular badge we  convert it to inline-block so we can give it a width..Since we are using absolute positioning,
so we set its parent or card header to relative */


.plan__name {
    color: #fff;
    margin: 0;
    font-weight: 500;
    font-size: 2.4rem;
}

.plan__price {
    font-size: 6rem;
}

.plan__billing-cycle {
    font-size: 2.4rem;
    font-weight: 300;
    opacity: 0.8;
    margin-right: 1rem;
}

.plan__description {
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 1px;
    display: block;
}

.plan .list__item {
    margin-bottom: 2rem;
}

.plan--popular .card__header {
    position: relative;
}


.plan--popular .card__header::before {
    content: url(../images/popular.svg);
     width: 40px;
    display: inline-block;
    position: absolute;
    top: -6px;
    right: 5%;
   
}

@media screen and (min-width: 1024px) {
    .plan__name {
        font-size: 1.4rem;
    }

    .plan__price {
        font-size: 5rem;
    }

    .plan__billing-cycle {
        font-size: 1.6rem;
    }

    .plan__description {
        font-size: 1.7rem;
    }
}


/* Media Objects */
/* We create a media object, it has an image and a body section
Body has a title and a paragraph */

.media{
    display: flex;
    /* flex-direction: row; */
}

.media__title {
    margin-top: 0;
}

.media__body {
    margin: 0 2rem;
}

.media__image {
    margin-top: 1rem;
}



/* Quotes */

/* Quotes has some texts and name of the person . Quote essentially has these components: A quote section and a footer section. The footer section is essentially a media object(media object has image on left, a title and a paragraph on right),
footer section has a dash line image on left(media-image),
name of the person(media-title) and their organization */
.quote {
    font-size: 3rem;
    font-style: italic;
    color: var(--color-body-darker);
    line-height: 1.3;
}

.quote__text::before {
    content: open-quote;
}

.quote__text::after {
    content: close-quote;
}

.quote__author {
    font-size: 3rem;
    font-weight: 500;
    font-style: normal;
    margin-bottom: 0;
}

.quote__organization {
    color: var(--color-headings);
    opacity: 0.4;
    font-size: 2rem;
    font-style: normal;
}

.quote__line {
    position: relative;
    bottom: 10px;
}

@media screen and (min-width: 1024px) {
    .quote {
        font-size: 2rem;
    }

    .quote__author {
        font-size: 2.4rem;
    }

    .quote__organization {
        font-size: 1.6rem;
    }
}





/* Grids */
/* We have default grid in mobile with 1 col,
then in tablet 2 col and large screens 3 col */

.grid {
    display: grid;
}

@media screen and (min-width: 768px) {
    .grid--1x2 {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media screen and (min-width: 1024px) {
    .grid--1x3 {
        grid-template-columns: repeat(3, 1fr);
    }
}




/* Testimonials */
/* a testimonial is a card which has an image and a quote component. 
Basically we have a grid 1x2, inside this we have two components,
an image on left and a quote on right. In image grid, we have an image
and a span for quote icon. In quote grid, we have as usual,
a quote paragraph div and a quote footer(sit one after one up-down),
quote footer div has a media image and a media body(sit side by side) */
/* We set the quote icon to absolute to its always fixed */


.testimonial {
    padding: 3rem;
}

.testimonial__image {
    position: relative;
    margin: 0 3rem;
}

.testimonial__image>img {
    width: 100%;
}

.testimonial__image>.icon-container {
    position: absolute;
    top: 3rem;
    right: -32px;
}

@media screen and (min-width: 768px) {
    .testimonial__image {
        margin: 0;
    }

    .testimonial .quote,
    .testimonial .quote__author {
        font-size: 2.4rem;
    }

    .testimonial .quote {
        margin-left: 6rem;
        margin-right: 0;
    }
}




/* Callouts */

/* Callout is basically a 1x2 grid, on left a text section,on right 
column a button. The text section has a content div which has a 
heading and a body. The button is a div. */
/* In mobile, the button takes rest of the screen, so we divide our grid in 1fr auto */

.callout {
    padding: 4rem;
    border-radius: 5px;
}

.callout--primary {
    background: var(--color-primary);
    color: #fff;
}

.callout__heading {
    color: #fff;
    margin-top: 0;
    font-size: 3rem;
}

.callout .btn {
    justify-self: center;
    align-self: center;
}

.callout__content {
    text-align: center;
}

@media screen and (min-width: 768px) {
    .callout .grid--1x2 {
        grid-template-columns: 1fr auto;
    }

    .callout__content {
        text-align: left;
    }

    .callout .btn {
        justify-self: start;
        margin: 0 2rem;
    }
}




/* Collapsibles */
/* We have a header and a content section,
the header contains a header and an icon,
and the content is another div. We set two styling for the content div,
by default its collapsed class,
and this class has its height is set to 0,
and when we click,
we change its class to expanded,
in css the expanded has a height,
and we use js event listener to change this class when its clicked,
we also change the icon style and class dynamically. */

.collapsible__header {
    display: flex;
    justify-content: space-between;
}

.collapsible__heading {
    margin-top: 0;
    font-size: 3rem;
}

.collapsible__chevron {
    transform: rotate(-90deg);
    transition: transform 0.3s;
}

.collapsible__content {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: all 0.3s;
}

.collapsible--expanded .collapsible__chevron {
    transform: rotate(0);
}

.collapsible--expanded .collapsible__content {
    max-height: 100vh;
    opacity: 1;
}




/* Blocks */
/* Blocks are part of page,
that can contain sections divs etc,
they can contain many elements but they mainly work as a background element,
they can be skewed left or right,
usually they are a section and can contain anything inside. We give our blocks some padding and define some colors for its heading,
content and background and we can create skewed left or right values,
for skewing right or left,
we can just use polygon(clipping) in our class and apply this class to our section. */


.block {
    --padding-vertical: 6rem;
    padding: var(--padding-vertical) 2rem;
}

.block__header {
    text-align: center;
}

.block__heading {
    margin-top: 0;
}

.block--dark {
    background: #000;
    color: #7b858b;
}

.block--dark .block__heading {
    color: #fff;
}

.block--skewed-right {
    padding-bottom: calc(var(--padding-vertical) + 4rem);
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 80%);
}

.block--skewed-left {
    padding-bottom: calc(var(--padding-vertical) + 4rem);
    clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0% 100%);
}

.container {
    max-width: 1140px;
    margin: 0 auto;
}